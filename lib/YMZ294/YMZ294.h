/*
 * YMZ294 library  ver 0.5
 * 2020 @Enchan1207
*/
#ifndef _YMZ294_H_
#define _YMZ294_H_

#include <Arduino.h>
#include <avr/pgmspace.h>

/* -------- */
#define WR 18
#define CS 19
#define A0 20
#define RESET 21

#define ADDR 0
#define DATA 1

#define CH_A 0
#define CH_B 1
#define CH_C 2

#define NOTE_ON 0x90
#define NOTE_OFF 0x80
#define CTRLCHG 0xB0
#define PROGCHG 0xC0

#define CTRL_VOLUME 0x07

// freq table
const uint16_t freqs[128] PROGMEM = {
    0x3BB9,0x385E,0x3534,0x3238,0x2F66,0x2CBD,0x2A3A,0x27DC,
    0x259F,0x2382,0x2184,0x1FA3,0x1DDC,0x1C2F,0x1A9A,0x191C,
    0x17B3,0x165E,0x151D,0x13EE,0x12CF,0x11C1,0x10C2,0x0FD1,
    0x0EEE,0x0E17,0x0D4D,0x0C8E,0x0BD9,0x0B2F,0x0A8E,0x09F7,
    0x0967,0x08E0,0x0861,0x07E8,0x0777,0x070B,0x06A6,0x0647,
    0x05EC,0x0597,0x0547,0x04FB,0x04B3,0x0470,0x0430,0x03F4,
    0x03BB,0x0385,0x0353,0x0323,0x02F6,0x02CB,0x02A3,0x027D,
    0x0259,0x0238,0x0218,0x01FA,0x01DD,0x01C2,0x01A9,0x0191,
    0x017B,0x0165,0x0151,0x013E,0x012C,0x011C,0x010C,0x00FD,
    0x00EE,0x00E1,0x00D4,0x00C8,0x00BD,0x00B2,0x00A8,0x009F,
    0x0096,0x008E,0x0086,0x007E,0x0077,0x0070,0x006A,0x0064,
    0x005E,0x0059,0x0054,0x004F,0x004B,0x0047,0x0043,0x003F,
    0x003B,0x0038,0x0035,0x0032,0x002F,0x002C,0x002A,0x0027,
    0x0025,0x0023,0x0021,0x001F,0x001D,0x001C,0x001A,0x0019,
    0x0017,0x0016,0x0015,0x0013,0x0012,0x0011,0x0010,0x000F,
    0x000E,0x000E,0x000D,0x000C,0x000B,0x000B,0x000A,0x0009
};

/* -------- */
class YMZ294 {

private:
    // statuses
    uint8_t mixerStat;
    uint8_t volume[3] = {15, 15, 15};

public:

    // Initialize
    YMZ294();
    void begin();
    void reset();

    // Midi Protocols
    void noteOn(uint8_t ch, uint8_t num, uint8_t velocity);
    void noteOff(uint8_t ch, uint8_t velocity);
    void controlChange(uint8_t ch, uint8_t control, uint8_t param);
    void programChange(uint8_t num);

    // Access
    void writeAt(uint8_t addr, uint8_t data);
    void write(boolean isData, uint8_t data);

    // Functions
    void setFrequency(uint8_t ch, uint16_t freq);
    void setVolume(uint8_t ch, uint8_t volume);
    void setMixer(uint8_t ch, boolean isOutput);

    // Envelope
    void setEnvShape(uint8_t shape);
    void setEnvFreq(uint16_t freq);
};

#endif
